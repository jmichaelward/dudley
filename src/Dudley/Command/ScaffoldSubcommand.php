<?php
/**
 * Concrete class for the `scaffold` subcommand to `wp dudley`.
 *
 * @package Dudley\Command
 */

namespace Dudley\Command;

use Dudley\Command\Scaffold as Scaffold;
use Dudley\Dudley;

/**
 * Class ScaffoldSubcommand
 *
 * @package Dudley\Command
 */
class ScaffoldSubcommand implements SubcommandInterface {
	/**
	 * The main plugin class.
	 *
	 * @var Dudley
	 */
	private $plugin;

	/**
	 * The pattern classes that can be generated by this command.
	 *
	 * @var array
	 */
	private $abstract_patterns = [
		'item'     => Scaffold\Item::class,
		'pattern'  => Scaffold\View::class,
		'repeater' => Scaffold\Repeater::class,
	];

	/**
	 * ScaffoldSubcommand constructor.
	 *
	 * @param Dudley $plugin Main plugin class.
	 */
	public function __construct( Dudley $plugin ) {
		$this->plugin = $plugin;
	}

	/**
	 * SubCommand name.
	 *
	 * @var string $name
	 */
	public static $name = 'scaffold';

	/**
	 * Run the command.
	 *
	 * @TODO: Add layout option for FlexibleContent.
	 *
	 * @param array $args Arguments passed to the command.
	 * @param array $assoc_args Options passed to the command.
	 */
	public function run( $args, $assoc_args ) {
		// Check for valid pattern type.
		if ( ! $this->valid_pattern( $args[0] ) ) {
			return \WP_CLI::error( 'Invalid pattern type entered. Must be one of item, pattern, or repeater.' );
		}

		if ( ! isset( $assoc_args['name'] ) && ! isset( $assoc_args['action'] ) ) {
			return \WP_CLI::error( 'Without a name or an action, we don\'t know what to call your pattern. Please provide one or the other.' );
		}

		if ( $this->create( $args[0], $assoc_args ) ) {
			return \WP_CLI::success( ucwords( $args[0] ) . ' created.' );
		}

		return \WP_CLI::log( 'Scaffolding process complete.' );
	}

	/**
	 * Check whether the selected pattern is a valid type.
	 *
	 * @param string $pattern Type of pattern.
	 *
	 * @return bool
	 */
	private function valid_pattern( $pattern ) {
		return array_key_exists( $pattern, $this->abstract_patterns );
	}

	/**
	 * Create the scaffolded files.
	 *
	 * @param string $pattern Class name of the pattern to create.
	 * @param array  $args    Arguments that pattern class accepts.
	 */
	private function create( $pattern, $args ) {
		$class_name = $this->abstract_patterns[ $pattern ];

		/* @var Scaffold\AbstractItemScaffold | Scaffold\AbstractViewScaffold $object */
		$object = new $class_name( $args );

		return $object->scaffold();
	}
}
